#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
//#include <dt-bindings/zmk/rgb.h>

/ {
    macros {
        G1: G1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp N1>;
            label = "G1";
        };

        G2: G2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp N2>;
            label = "G2";
        };

        G3: G3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp N3>;
            label = "G3";
        };

        G4: G4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp N4>;
            label = "G4";
        };

        G5: G5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp N5>;
            label = "G5";
        };

        G6: G6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp N6>;
            label = "G6";
        };
    };

    combos {
        compatible = "zmk,combos";

        Switch_to_BT_Mode {
            bindings = <&tog 2>;
            key-positions = <0 91 94>; //G0 ,RALT, RCTL
        };
    };

    behaviors {
        FN: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&tog 3>;
        };

        BL_ZMKS: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&studio_unlock>, <&bootloader>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        Default_layer {
            bindings = <
&G1  &kp ESC    &kp F1    &kp F2    &kp F3  &kp F4             &kp F5  &kp F6  &kp F7  &kp F8     &kp F9    &kp F10    &kp F11     &kp F12    &to 1            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&G2  &kp GRAVE  &kp N1    &kp N2    &kp N3  &kp N4  &kp N5     &kp N6  &kp N7  &kp N8  &kp N9     &kp N0    &kp MINUS  &kp EQUAL   &kp BSPC   &kp DEL          &kp C_PREV         &kp C_NEXT
&G3  &kp TAB    &kp Q     &kp W     &kp E   &kp R   &kp T      &kp Y   &kp U   &kp I   &kp O      &kp P     &kp LBKT   &kp RBKT    &kp BSLH   &kp PAUSE_BREAK  &kp HOME           &kp C_PLAY_PAUSE
&G4  &kp CAPS   &kp A     &kp S     &kp D   &kp F   &kp G      &kp H   &kp J   &kp K   &kp L      &kp SEMI  &kp SQT                &kp RET    &kp INSERT       &kp END            &kp PAGE_UP
&G5  &kp LSHFT            &kp Z     &kp X   &kp C   &kp V      &kp B   &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH               &kp RSHFT  &kp PRINTSCREEN  &kp UP             &kp PAGE_DOWN
&G6  &kp LCTRL  &kp LGUI  &kp LALT                  &kp SPACE                                     &kp RALT  &FN   &kp K_CMENU &kp RCTRL  &kp LEFT         &kp DOWN           &kp RIGHT
            >;
        };

        Num_Pad_On {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &to 0    &kp PLUS  &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp DEL  &kp STAR  &kp FSLH
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N7   &kp N8    &kp N9
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans  &kp N4   &kp N5    &kp N6
&trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans  &kp N1   &kp N2    &kp N3
&trans  &trans  &trans  &trans                  &trans                                  &trans  &trans  &trans  &trans  &kp N0   &kp DOT   &kp RET
            >;
        };

        BT_Layer {
            bindings = <
&bt BT_SEL 0    &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 1    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans
&bootloader        &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans
&sys_reset      &trans  &trans  &trans                  &trans                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        FUNCTION_Layer {
            bindings = <
&trans    &trans  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans           &kp C_BRI_DEC   &kp C_BRI_INC   &trans  &trans  &trans  &trans  &trans &trans  &trans  &trans  &trans
&trans    &trans  &trans      &trans             &trans           &trans   &trans  &trans          &trans          &trans  &trans  &trans  &trans  &trans  &trans &trans  &trans  &trans
&trans    &trans  &trans      &trans             &trans           &trans   &trans  &trans          &trans          &trans  &trans  &trans  &trans  &trans  &trans &trans  &trans  &trans
&trans    &trans  &trans      &trans             &trans           &trans   &trans  &trans          &trans          &trans  &trans  &trans  &trans          &trans &trans  &trans  &trans
&trans    &trans              &trans             &trans           &trans   &trans  &trans          &trans          &trans  &trans  &trans  &trans          &trans &trans  &trans  &trans
&trans    &trans  &trans      &trans                                       &trans                                                  &trans  &trans  &trans &trans  &trans  &trans  &trans
            >;
        };
    };
};